import javafx.util.Pair;

import java.io.*;
import java.util.*;

public class WordStatLineIndex {
    public static void main(String[] args) {
        MyScanner in;
/*
    String adh = "`'?pс?cщg?uмr?шкв??yхвзjw'o??z?fкзъкаjэn?ш???uo'мxemtь?ьu??pl????ш??чbц????эщцiц???щ??чz??x???????в? 681 1:541 2:437 3:595 4:265 8:461 9:1 11:425 13:225 13:620 14:292 14:566 15:102 15:127 15:479 16:322 16:563 16:625 21:118 22:182 25:126 25:508 28:271 29:19 30:726 34:614 35:223 35:429 36:6 37:153 37:312 39:75 41:942 43:845 44:78 44:732 47:324 51:970 54:455 56:257 57:768 59:30 60:76 60:597 63:889 66:657 68:713 72:170 76:584 78:488 78:691 79:105 80:117 80:437 80:598 81:348 83:200 87:17 87:109 92:48 94:225 95:464 95:521 95:782 99:316 102:873 104:332 104:750 107:649 108:592 109:404 109:697 109:727 112:813 113:506 114:166 116:153 116:295 116:301 118:18 120:166 122:540 123:107 123:788 126:95 127:397 131:631 132:1 134:352 135:321 136:468 136:751 140:37 140:50 141:528 143:281 143:660 144:24 145:958 146:540 148:331 149:349 151:125 152:19 152:290 156:204 157:688 158:1 160:720 161:152 161:580 163:199 163:341 164:13 164:605 166:121 170:371 171:15 171:386 172:273 174:126 177:800 179:125 188:97 188:403 189:270 191:479 197:29 197:520 198:24 201:537 202:128 202:752 204:141 209:546 209:584 209:879 213:513 214:39 221:675 222:172 225:102 225:301 229:173 230:236 230:406 230:552 231:401 233:396 233:500 235:138 237:552 238:619 241:171 241:221 241:308 242:448 243:216 243:474 243:638 246:483 247:216 249:296 250:688 253:361 254:2 259:104 259:148 260:150 261:463 262:419 263:80 263:438 264:26 265:209 265:901 267:466 268:152 268:194 268:377 268:474 271:329 271:373 273:403 273:828 274:572 275:921 276:49 276:326 277:139 277:514 278:465 280:469 281:448 282:28 285:811 289:913 292:594 292:664 297:169 297:407 300:730 301:479 302:217 302:731 306:400 307:782 308:520 310:589 314:363 315:425 315:677 318:182 323:156 323:297 324:236 325:295 326:439 327:208 327:447 327:899 330:425 331:295 334:429 337:330 338:807 338:895 339:30 342:151 343:276 344:140 345:43 346:255 350:154 351:655 354:199 359:37 360:795 362:565 363:846 363:848 363:851 364:714 366:432 367:978 368:578 370:132 371:582 372:513 374:357 375:485 376:320 376:409 376:498 377:471 378:176 379:124 379:502 383:138 383:331 383:458 383:598 385:602 386:95 386:218 390:54 390:582 391:241 392:690 394:584 395:95 398:89 398:95 403:451 407:88 410:366 410:635 411:112 412:149 412:637 414:525 416:35 416:119 416:385 418:950 421:944 422:100 425:310 425:597 426:338 429:263 429:272 430:162 433:270 433:355 434:419 434:437 439:460 440:81 441:429 445:420 445:428 449:7 449:243 450:821 451:703 453:711 455:405 456:201 456:383 458:112 458:285 458:311 464:292 467:323 467:658 468:167 472:254 473:361 475:785 476:314 477:76 477:364 479:475 479:787 481:713 483:51 483:317 483:710 484:675 484:694 484:795 486:247 488:751 491:172 491:271 492:167 492:658 493:726 494:379 495:482 497:719 498:444 503:396 504:132 504:768 505:249 506:202 506:603 507:470 508:611 509:593 510:39 510:298 511:516 511:728 514:347 515:86 516:429 517:663 519:7 519:535 521:569 522:90 530:433 538:362 538:716 538:902 539:333 541:164 542:401 544:286 544:345 547:369 548:573 548:851 549:567 549:713 550:583 552:416 557:716 557:843 558:18 560:187 562:26 565:609 569:537 570:331 572:690 575:258 576:107 576:162 579:648 580:10 580:239 584:164 584:486 585:403 586:453 587:308 588:387 589:297 589:435 590:222 590:360 591:376 595:60 596:60 598:169 598:348 601:109 602:7 602:508 603:721 604:86 605:37 605:264 610:75 610:211 611:138 611:417 618:40 623:678 625:124 629:713 629:843 630:471 631:623 631:641 633:275 635:27 636:243 639:414 640:611 641:529 644:64 644:756 645:484 646:26 647:572 647:806 649:149 650:277 651:328 651:405 653:57 653:77 659:211 659:484 659:840 660:36 662:59 664:69 667:63 672:483 673:233 676:800 678:341 679:549 680:62 681:129 681:472 686:144 687:215 688:613 691:398 691:513 693:611 695:40 697:595 700:429 700:926 703:7 705:455 705:620 706:113 707:44 708:249 709:179 709:199 711:171 711:655 712:802 714:212 715:92 716:23 716:340 717:538 718:276 718:396 720:171 720:431 721:166 722:411 722:702 722:829 723:466 725:77 726:364 728:129 732:262 734:13 734:180 736:504 736:703 737:233 738:193 739:272 740:134 740:270 741:206 742:339 743:781 747:105 753:559 756:311 757:867 759:250 759:562 760:285 761:713 763:355 767:322 771:596 772:403 777:487 779:291 780:595 781:509 782:582 782:751 783:44 783:426 784:686 786:390 790:252 790:466 791:528 791:577 794:634 795:472 798:171 806:760 809:362 810:161 815:523 816:423 818:488 821:593 822:390 823:669 825:374 827:164 827:419 828:283 829:417 830:696 831:31 831:951 832:203 836:106 842:817 844:24 849:582 852:629 854:438 854:457 854:498 857:489 858:631 865:98 865:226 869:461 870:377 870:502 871:385 875:549 877:272 879:232 879:365 879:487 882:24 883:281 885:3 887:487 889:80 890:484 893:54 893:140 893:393 893:485 894:470 894:687 896:45 896:180 896:706 899:78 899:300 899:512 899:633 900:179 901:592 903:190 904:162 905:529 907:725 908:216 910:270 910:730 911:345 911:494 912:29 912:71 912:159 913:447 913:547 914:52 915:466 917:87 917:487 917:711 918:398 919:233 919:362 925:120 925:522 925:749 928:285 932:225 932:402 933:5 933:406 935:852 937:478 940:612 942:69 942:85 943:147 949:122 949:268 949:860 950:517 951:327 952:406 952:465 957:558 958:580 960:434 960:446 963:85 963:570 963:685 965:290 965:602 966:200 971:34 971:184 971:266 972:4 972:550 973:224 974:564 975:389 978:117 980:826 981:363 983:18 983:541 988:577 989:386 992:5 992:344 993:766 994:457 994:481 994:796 995:186 995:806 996:336 997:667 997:813 999:515`";
    String b =   "`'?pс?cщg?uмr?шкв??yхвзjw'o??z?fкзъкаjэn?ш???uo'мxemtь?ьu??pl????ш??чbц????эщцiц???щ??чz??x???????в? 681 1:541 2:437 3:595 4:265 8:461 9:1 11:425 13:225 13:620 14:292 14:566 15:102 15:127 15:479 16:322 16:563 16:625 21:118 22:182 25:126 25:508 28:271 29:19 30:726 34:614 35:223 35:429 36:6 37:153 37:312 39:75 41:942 43:845 44:78 44:732 47:324 51:970 54:455 56:257 57:768 59:30 60:76 60:597 63:889 66:657 68:713 72:170 76:584 78:488 78:691 79:105 80:117 80:437 80:598 81:348 83:200 87:17 87:109 92:48 94:225 95:464 95:521 95:782 99:316 102:873 104:332 104:750 107:649 108:592 109:404 109:697 109:727 112:813 113:506 114:166 116:153 116:295 116:301 118:18 120:166 122:540 123:107 123:788 126:95 127:397 131:631 132:1 134:352 135:321 136:468 136:751 140:37 140:50 141:528 143:281 143:660 144:24 145:958 146:540 148:331 149:349 151:125 152:19 152:290 156:204 157:688 158:1 160:720 161:152 161:580 163:199 163:341 164:13 164:605 166:121 170:371 171:15 171:386 172:273 174:126 177:800 179:125 188:97 188:403 189:270 191:479 197:29 197:520 198:24 201:537 202:128 202:752 204:141 209:546 209:584 209:879 213:513 214:39 221:675 222:172 225:102 225:301 229:173 230:236 230:406 230:552 231:401 233:396 233:500 235:138 237:552 238:619 241:171 241:221 241:308 242:448 243:216 243:474 243:638 246:483 247:216 249:296 250:688 253:361 254:2 259:104 259:148 260:150 261:463 262:419 263:80 263:438 264:26 265:209 265:901 267:466 268:152 268:194 268:377 268:474 271:329 271:373 273:403 273:828 274:572 275:921 276:49 276:326 277:139 277:514 278:465 280:469 281:448 282:28 285:811 289:913 292:594 292:664 297:169 297:407 300:730 301:479 302:217 302:731 306:400 307:782 308:520 310:589 314:363 315:425 315:677 318:182 323:156 323:297 324:236 325:295 326:439 327:208 327:447 327:899 330:425 331:295 334:429 337:330 338:807 338:895 339:30 342:151 343:276 344:140 345:43 346:255 350:154 351:655 354:199 359:37 360:795 362:565 363:846 363:848 363:851 364:714 366:432 367:978 368:578 370:132 371:582 372:513 374:357 375:485 376:320 376:409 376:498 377:471 378:176 379:124 379:502 383:138 383:331 383:458 383:598 385:602 386:95 386:218 390:54 390:582 391:241 392:690 394:584 395:95 398:89 398:95 403:451 407:88 410:366 410:635 411:112 412:149 412:637 414:525 416:35 416:119 416:385 418:950 421:944 422:100 425:310 425:597 426:338 429:263 429:272 430:162 433:270 433:355 434:419 434:437 439:460 440:81 441:429 445:420 445:428 449:7 449:243 450:821 451:703 453:711 455:405 456:201 456:383 458:112 458:285 458:311 464:292 467:323 467:658 468:167 472:254 473:361 475:785 476:314 477:76 477:364 479:475 479:787 481:713 483:51 483:317 483:710 484:675 484:694 484:795 486:247 488:751 491:172 491:271 492:167 492:658 493:726 494:379 495:482 497:719 498:444 503:396 504:132 504:768 505:249 506:202 506:603 507:470 508:611 509:593 510:39 510:298 511:516 511:728 514:347 515:86 516:429 517:663 519:7 519:535 521:569 522:90 530:433 538:362 538:716 538:902 539:333 541:164 542:401 544:286 544:345 547:369 548:573 548:851 549:567 549:713 550:583 552:416 557:716 557:843 558:18 560:187 562:26 565:609 569:537 570:331 572:690 575:258 576:107 576:162 579:648 580:10 580:239 584:164 584:486 585:403 586:453 587:308 588:387 589:297 589:435 590:222 590:360 591:376 595:60 596:60 598:169 598:348 601:109 602:7 602:508 603:721 604:86 605:37 605:264 610:75 610:211 611:138 611:417 618:40 623:678 625:124 629:713 629:843 630:471 631:623 631:641 633:275 635:27 636:243 639:414 640:611 641:529 644:64 644:756 645:484 646:26 647:572 647:806 649:149 650:277 651:328 651:405 653:57 653:77 659:211 659:484 659:840 660:36 662:59 664:69 667:63 672:483 673:233 676:800 678:341 679:549 680:62 681:129 681:472 686:144 687:215 688:613 691:398 691:513 693:611 695:40 697:595 700:429 700:926 703:7 705:455 705:620 706:113 707:44 708:249 709:179 709:199 711:171 711:655 712:802 714:212 715:92 716:23 716:340 717:538 718:276 718:396 720:171 720:431 721:166 722:411 722:702 722:829 723:466 725:77 726:364 728:129 732:262 734:13 734:180 736:504 736:703 737:233 738:193 739:272 740:134 740:270 741:206 742:339 743:781 747:105 753:559 756:311 757:867 759:250 759:562 760:285 761:713 763:355 767:322 771:596 772:403 777:487 779:291 780:595 781:509 782:582 782:751 783:44 783:426 784:686 786:390 790:252 790:466 791:528 791:577 794:634 795:472 798:171 806:760 809:362 810:161 815:523 816:423 818:488 821:593 822:390 823:669 825:374 827:164 827:419 828:283 829:417 830:696 831:31 831:951 832:203 836:106 842:817 844:24 849:582 852:629 854:438 854:457 854:498 857:489 858:631 865:98 865:226 869:461 870:377 870:502 871:385 875:549 877:272 879:232 879:365 879:487 882:24 883:281 885:3 887:487 889:80 890:484 893:54 893:140 893:393 893:485 894:470 894:687 896:45 896:180 896:706 899:78 899:300 899:512 899:633 900:179 901:592 903:190 904:162 905:529 907:725 908:216 910:270 910:730 911:345 911:494 912:29 912:71 912:159 913:447 913:547 914:52 915:466 917:87 917:487 917:711 918:398 919:233 919:362 925:120 925:522 925:749 928:285 932:225 932:402 933:5 933:406 935:852 937:478 940:612 942:69 942:85 943:147 949:122 949:268 949:860 950:517 951:327 952:406 952:465 957:558 958:580 960:434 960:446 963:85 963:570 963:685 965:290 965:602 966:200 971:34 971:184 971:266 972:4 972:550 973:224 974:564 975:389 978:117 980:826 981:363 983:18 983:541 988:577 989:386 992:5 992:344 993:766 994:457 994:481 994:796 995:186 995:806 996:336 997:667 997:813 999:515`";
    System.out.println(Objects.equals(adh, b));
*/
        try {
            in = new MyScanner(args[0]);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        } catch (IndexOutOfBoundsException e) {
            System.err.println("Not found path to input file");
            return;
        }

        TreeMap<String, ArrayList<Pair<Integer, Integer>>> ans = new TreeMap<>();

        int i = 0;
        while (!in.isEOF()) {
            try {
                i++;
                int j = 1;
                while (!in.goNextLine()) {
                    String s = in.nextWord();

                    if (in.isEOF()) {
                        break;
                    } else {
                        if (ans.get(s) == null) {
                            ArrayList<Pair<Integer, Integer>> pos = new ArrayList<>();
                            pos.add(new Pair<>(i, j++));
                            ans.put(s, pos);
                        } else {
                            ans.get(s).add(new Pair<>(i, j++));
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try {
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            //System.out.println(args.length);
           // BufferedWriter oueed = new BufferedWriter(new FileWriter("dck"));
            OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(args.length > 1 ? args[1] : "output.txt", false),"UTF-8" );
            for (Map.Entry<String, ArrayList<Pair<Integer, Integer>>> word : ans.entrySet()) {
                out.write(word.getKey() + " " + word.getValue().size());
                for (Pair a : word.getValue()) {
                    out.write(" " + a.getKey() + ":" + a.getValue());
                }
                out.write('\n');
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
